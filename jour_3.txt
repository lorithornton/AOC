« Nos ordinateurs ont des problèmes, donc je ne sais pas si nous avons des historiens en chef en stock ! Mais vous êtes les bienvenus pour vérifier l’entrepôt », explique le commerçant légèrement énervé de la boutique de location de luge du pôle Nord. Les historiens partent y jeter un coup d’œil.

Le commerçant se tourne vers vous. « Avez-vous une chance de voir pourquoi nos ordinateurs ont à nouveau des problèmes ? »

L’ordinateur semble essayer d’exécuter un programme, mais sa mémoire (votre entrée de puzzle) est corrompue. Toutes les instructions ont été mélangées !

Il semble que le but du programme soit simplement de multiplier des nombres. Il le fait avec des instructions telles que , où et sont chacun des nombres de 1 à 3 chiffres. Par exemple, multiplie par pour obtenir un résultat de . De même, multiplierait par .mul(X,Y)XYmul(44,46)44462024mul(123,4)1234

Cependant, comme la mémoire du programme a été corrompue, il existe également de nombreux caractères invalides qui doivent être ignorés, même s’ils ressemblent à une partie d’une instruction. Les séquences comme , , , ou ne font rien.mulmul(4*mul(6,9!?(12,34)mul ( 2 , 4 )

Par exemple, considérez la section suivante de la mémoire corrompue :

xmul(2,4)%&mul[3,7]!@^do_not_mul(5,5)+mul(32,64]then(mul(11,8)mul(8,5))
Seules les quatre sections mises en évidence sont de véritables instructions. En additionnant le résultat de chaque instruction, on obtient ().mul1612*4 + 5*5 + 11*8 + 8*5

Recherchez des instructions non corrompues dans la mémoire corrompue. Qu’obtenez-vous si vous additionnez tous les résultats des multiplications ?mul
